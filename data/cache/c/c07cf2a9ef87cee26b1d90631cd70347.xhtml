
<h1 class="sectionedit1" id="события">События</h1>
<div class="level1">

<p>
Типы для уведомления
</p>

</div>
<!-- EDIT1 SECTION "События" [1-68] -->
<h3 class="sectionedit2" id="создание_типа_поддерживающего_событие">Создание типа, поддерживающего событие</h3>
<div class="level3">

</div>

<h4 id="определение_типа_для_хранения_доп_инф-ии_передаваемой_получателем_уведомления_о_событии">1 Определение типа для хранения доп инф-ии, передаваемой получателем уведомления о событии</h4>
<div class="level4">
<ul>
<li class="level1"><div class="li"> ДОЛЖЕН НАСЛЕДОВАТЬ ОТ System.EventArgs</div>
</li>
<li class="level1"><div class="li"> имя должно заканчиваться на EventArgs</div>
</li>
<li class="level1"><div class="li"> Должны содержать какие нибудь поля-св-ва (где же хранить инфу)</div>
</li>
</ul>

<p>
Пример:
</p>
<pre class="code">      internal class NewMailEventArgs : EventArgs {
            private string POLE;
            public NewMailEventArgs(String x) { Pole=x;}
      } </pre>

</div>

<h4 id="определение_члена_события">2 Определение члена события</h4>
<div class="level4">
<ul>
<li class="level1"><div class="li"> объявляется с ключевым словом event</div>
</li>
<li class="level1"><div class="li"> назначается область действия (public-почти всегда)</div>
</li>
</ul>

<p>
Пример:
</p>
<pre class="code">      internal class MailManager {
            public event EventHandler&lt;NewMailEventArgs&gt; NewMail;
      } </pre>

<p>
NewMail - имя события, EventHandler&lt;NewMailEventArgs&gt; - тип члена события
</p>

</div>

<h4 id="определение_метода_ответственного_за_уведомление_объектов">3 Определение метода ответственного за уведомление объектов</h4>
<div class="level4">
<ul>
<li class="level1"><div class="li"> В классе должен быть виртуальный защищенный метод, вызываемый из кода класса при возникновении события</div>
</li>
<li class="level1"><div class="li"> 1 параметр - MalilMsgEventArgs e</div>
</li>
</ul>

<p>
Пример:
</p>
<pre class="code">      internal class MailManager {
            protected virtual void OnNewMail(NewMailEventArgs e) {
                  EventHandler&lt;NewMailEventArgs&gt; temp = NewMail;
                  if (temp!=null) temp(this,e); //поднятие события
            }
      }  </pre>

<p>
Проблема:
temp может быть null, поэтому:
</p>
<pre class="code">     EventHandler&lt;NewMailEventArgs&gt; temp = Thread.VolatileRead(ref NewMail);</pre>

<p>
VolatileRead заставляет считывать NewMail в точке вызова и позволяет копировать ссылку в переменную temp и вызов temp, когда не нулл
</p>

</div>

<h4 id="определение_метода_транслирующего_информацию_в_событие">4 Определение метода транслирующего информацию в событие</h4>
<div class="level4">
<pre class="code">    internal class MailManager {
         public void SimulateNewMail(String x) {
               NewMailEventArgs e = new NewMailEventArgs(x);
               OnNewMail(e);
         }
    }</pre>

</div>
<!-- EDIT2 SECTION "Создание типа, поддерживающего событие" [69-2525] -->
<h3 class="sectionedit3" id="создание_типа_отслеживающего_событие">Создание типа, отслеживающего событие</h3>
<div class="level3">
<pre class="code">    internal sealed class Fax {
        public Fax(MailManager mm) {
             mm.NewMail +=FaxMsg;
        }
        private void FaxMsg(Object sender, NewMailEventArgs e){
        //sender для вз-ия с объектом MailManager
        //e - доп инф-ия о событии, e.From, e.To итд
        }
        public void Unregister(MailManager mm){
             MailManager.mm.NewMail -= FaxMsg;
        }
    }
       </pre>

</div>
<!-- EDIT3 SECTION "Создание типа, отслеживающего событие" [2526-] -->