
<p>
<a href="http://www.wikihow.com/Create-a-Secure-Login-Script-in-PHP-and-MySQL" class="urlextern" title="http://www.wikihow.com/Create-a-Secure-Login-Script-in-PHP-and-MySQL"  rel="nofollow">http://www.wikihow.com/Create-a-Secure-Login-Script-in-PHP-and-MySQL</a>
</p>

<h1 class="sectionedit1" id="database">Database</h1>
<div class="level1">

</div>
<!-- EDIT1 SECTION "Database" [74-96] -->
<h2 class="sectionedit2" id="create_mysql_db">Create mysql db</h2>
<div class="level2">
<pre class="code">  CREATE DATABASE `users`;</pre>

</div>
<!-- EDIT2 SECTION "Create mysql db" [97-153] -->
<h2 class="sectionedit3" id="create_user">Create user</h2>
<div class="level2">
<pre class="code">  CREATE USER &#039;sec_user&#039;@&#039;localhost&#039; IDENTIFIED BY &#039;9xAF3BbKFrLe&#039;;
  GRANT SELECT, INSERT, UPDATE ON `users`.* TO &#039;sec_user&#039;@&#039;localhost&#039;;</pre>

</div>
<!-- EDIT3 SECTION "Create user" [154-319] -->
<h2 class="sectionedit4" id="create_table">Create table</h2>
<div class="level2">
<pre class="code">  CREATE TABLE `secure_login`.`members` (
     `id` INT NOT NULL AUTO_INCREMENT PRIMARY KEY, 
     `username` VARCHAR(30) NOT NULL, 
     `email` VARCHAR(50) NOT NULL, 
     `password` CHAR(128) NOT NULL, 
     `salt` CHAR(128) NOT NULL
  ) ENGINE = InnoDB;</pre>

</div>
<!-- EDIT4 SECTION "Create table" [320-616] -->
<h2 class="sectionedit5" id="create_login_attempts_table_to_stop_brute_force">Create login attempts table to stop brute force</h2>
<div class="level2">
<pre class="code">  CREATE TABLE `secure_login`.`login_attempts` (
       `user_id` int(11) NOT NULL,
       `time` VARCHAR(30) NOT NULL 
  ) ENGINE=InnoDB</pre>

</div>
<!-- EDIT5 SECTION "Create login attempts table to stop brute force" [617-822] -->
<h2 class="sectionedit6" id="insert_data">Insert data</h2>
<div class="level2">

<p>
INSERT INTO `secure_login`.`members` VALUES(1, &#039;test_user&#039;, &#039;test@example.com&#039;, &#039;00807432eae173f652f2064bdca1b61b290b52d40e429a7d295d76a71084aa96c0233b82f1feac45529e0726559645acaed6f3ae58a286b9f075916ebf66cacc&#039;, &#039;f9aab579fc1b41ed0c44fe4ecdbfcdb4cb99b9023abb241a6db833288f4eea3c02f76e0d35204a8695077dcf81932aa59006423976224be0390395bae152d4ef&#039;);
</p>

</div>
<!-- EDIT6 SECTION "Insert data" [823-1191] -->
<h2 class="sectionedit7" id="define_data_to_connect">Define data to connect</h2>
<div class="level2">

<p>
Define info about connection in connectdb.php
</p>
<pre class="code">  define(&quot;HOST&quot;, &quot;localhost&quot;); // The host you want to connect to.
  define(&quot;USER&quot;, &quot;sec_user&quot;); // The database username.
  define(&quot;PASSWORD&quot;, &quot;eKcGZr59zAa2BEWU&quot;); // The database password. 
  define(&quot;DATABASE&quot;, &quot;secure_login&quot;); // The database name.
   
  $mysqli = new mysqli(HOST, USER, PASSWORD, DATABASE);</pre>

</div>
<!-- EDIT7 SECTION "Define data to connect" [1192-1596] -->
<h1 class="sectionedit8" id="php_functions">PHP functions</h1>
<div class="level1">

</div>
<!-- EDIT8 SECTION "PHP functions" [1597-1624] -->
<h2 class="sectionedit9" id="secure_start_session">Secure start session</h2>
<div class="level2">
<pre class="code">  function sec_session_start() {
      $session_name = &#039;sec_session_id&#039;; // Set a custom session name
      $secure = false; // Set to true if using https.
      $httponly = true; // This stops javascript being able to access the session id. 
      
      ini_set(&#039;session.use_only_cookies&#039;, 1); // Forces sessions to only use cookies. 
      $cookieParams = session_get_cookie_params(); // Gets current cookies params.
      session_set_cookie_params($cookieParams[&quot;lifetime&quot;], $cookieParams[&quot;path&quot;], $cookieParams[&quot;domain&quot;], $secure, $httponly); 
      session_name($session_name); // Sets the session name to the one set above.
      session_start(); // Start the php session
      session_regenerate_id(); // regenerated the session, delete the old one.  
  }</pre>

</div>
<!-- EDIT9 SECTION "Secure start session" [1625-2445] -->
<h2 class="sectionedit10" id="secure_login">Secure login</h2>
<div class="level2">
<pre class="code">  function login($email, $password, $mysqli) {
   // Using prepared Statements means that SQL injection is not possible. 
   if ($stmt = $mysqli-&gt;prepare(&quot;SELECT id, username, password, salt FROM members WHERE email = ? LIMIT 1&quot;)) { 
    $stmt-&gt;bind_param(&#039;s&#039;, $email); // Bind &quot;$email&quot; to parameter.
    $stmt-&gt;execute(); // Execute the prepared query.
    $stmt-&gt;store_result();
    $stmt-&gt;bind_result($user_id, $username, $db_password, $salt); // get variables from result.
    $stmt-&gt;fetch();
    $password = hash(&#039;sha512&#039;, $password.$salt); // hash the password with the unique salt.
     
    if($stmt-&gt;num_rows == 1) { // If the user exists
       // We check if the account is locked from too many login attempts
       if(checkbrute($user_id, $mysqli) == true) { 
          // Account is locked
          // Send an email to user saying their account is locked
          return false;
       } else {
       if($db_password == $password) { // Check if the password in the database matches the password the user submitted. 
          // Password is correct!
        
           
             $user_browser = $_SERVER[&#039;HTTP_USER_AGENT&#039;]; // Get the user-agent string of the user.
        
             $user_id = preg_replace(&quot;/[^0-9]+/&quot;, &quot;&quot;, $user_id); // XSS protection as we might print this value
             $_SESSION[&#039;user_id&#039;] = $user_id; 
             $username = preg_replace(&quot;/[^a-zA-Z0-9_\-]+/&quot;, &quot;&quot;, $username); // XSS protection as we might print this value
             $_SESSION[&#039;username&#039;] = $username;
             $_SESSION[&#039;login_string&#039;] = hash(&#039;sha512&#039;, $password.$user_browser);
             // Login successful.
             return true;    
       } else {
          // Password is not correct
          // We record this attempt in the database
          $now = time();
          $mysqli-&gt;query(&quot;INSERT INTO login_attempts (user_id, time) VALUES (&#039;$user_id&#039;, &#039;$now&#039;)&quot;);
          return false;
       }
    }
    } else {
       // No user exists. 
       return false;
    }
  }
  }</pre>

</div>
<!-- EDIT10 SECTION "Secure login" [2446-] -->