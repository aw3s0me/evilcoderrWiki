a:137:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Memory Model";i:1;i:1;i:2;i:1;}i:2;i:1;}i:2;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:1;}i:3;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1;}i:4;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:41:"RULE: CPU THREAD LAUNCHES THE WORK ON GPU";}i:2;i:28;}i:5;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:70;}i:6;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:70;}i:7;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:12:"Local memory";i:1;i:2;i:2;i:70;}i:2;i:70;}i:8;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:70;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:70;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:42:"THREAD CAN STORE VARIABLES IN LOCAL MEMORY";}i:2;i:95;}i:11;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:137;}i:12;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:137;}i:13;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:137;}i:14;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:137;}i:15;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:" Thread can access to ";}i:2;i:141;}i:16;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:163;}i:17;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:12:"local memory";}i:2;i:165;}i:18;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:177;}i:19;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:179;}i:20;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:179;}i:21;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:179;}i:22;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:180;}i:23;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Shared memory";i:1;i:2;i:2;i:180;}i:2;i:180;}i:24;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:180;}i:25;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:180;}i:26;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:29:"SHARED AMONG THREADS IN BLOCK";}i:2;i:206;}i:27;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:235;}i:28;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:235;}i:29;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:235;}i:30;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:235;}i:31;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:28:" Thread block can access to ";}i:2;i:239;}i:32;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:267;}i:33;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"shared memory";}i:2;i:269;}i:34;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:282;}i:35;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:284;}i:36;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:284;}i:37;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:284;}i:38;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:284;}i:39;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:2:"..";}i:2;i:285;}i:40;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:287;}i:41;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:28:"  __shared__ int array[128];";}i:2;i:287;}i:42;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:320;}i:43;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:13:"Global memory";i:1;i:2;i:2;i:320;}i:2;i:320;}i:44;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:320;}i:45;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:345;}i:46;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:345;}i:47;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:345;}i:48;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:80:" Thread can read and write to global memory ANY TIME [in later and early kernel]";}i:2;i:349;}i:49;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:429;}i:50;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:429;}i:51;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:429;}i:52;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:429;}i:53;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:71:" Host memory for CPU, and host memory gets info only from GLOBAL MEMORY";}i:2;i:433;}i:54;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:504;}i:55;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:504;}i:56;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:504;}i:57;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:505;}i:58;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:22:"Using of global memory";i:1;i:4;i:2;i:505;}i:2;i:505;}i:59;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:505;}i:60;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:300:"  float h_arr[128];
  float *d_arr;
  
  cudaMalloc((void **)&d_arr, sizeof(float)*128);
  cudaMemCpy((void *)d_arr, (void *)h_arr, sizeof(float)*128, cudaMemCpyHostToDevice);
  
  use_global_GPU_mem<<<>>>(d_arr);
  cudaMemCpy((void *)h_arr, (void *)d_arr, sizeof(float)*128, cudaMemCpyHostToDevice);";}i:2;i:535;}i:61;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:853;}i:62;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:14:"Syncronization";i:1;i:2;i:2;i:853;}i:2;i:853;}i:63;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:853;}i:64;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:853;}i:65;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:"Problem: thread reads before another tries to try ";}i:2;i:880;}i:66;a:3:{i:0;s:6:"entity";i:1;a:1:{i:0;s:2:"->";}i:2;i:930;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:" need to sync";}i:2;i:932;}i:68;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:946;}i:69;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:946;}i:70;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:23:"Forms of syncronization";i:1;i:3;i:2;i:946;}i:2;i:946;}i:71;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:946;}i:72;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:980;}i:73;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:7:"Barrier";i:1;i:4;i:2;i:980;}i:2;i:980;}i:74;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:4;}i:2;i:980;}i:75;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:995;}i:76;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:995;}i:77;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:995;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:50:" Point in the programm where threads stop and wait";}i:2;i:999;}i:79;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1049;}i:80;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1049;}i:81;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1049;}i:82;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1049;}i:83;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:52:" When all threads reach the barrier, the can PROCEED";}i:2;i:1053;}i:84;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1105;}i:85;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1105;}i:86;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1105;}i:87;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1105;}i:88;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1106;}i:89;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1107;}i:90;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:18:"  __syncthreads();";}i:2;i:1107;}i:91;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1107;}i:92;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:".";}i:2;i:1129;}i:93;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1130;}i:94;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:160:"  __shared__ int array[128];
  int i = threadIdx.x;
  s[i]=s[i-1] //WRONG FOR SYNC COS COLLISION
  //NEED TO int temp = s[i-1];  __syncthread();   s[i] = temp; ";}i:2;i:1130;}i:95;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1300;}i:96;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:8:"Problems";i:1;i:2;i:2;i:1300;}i:2;i:1300;}i:97;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:2;}i:2;i:1300;}i:98;a:3:{i:0;s:10:"listo_open";i:1;a:0:{}i:2;i:1320;}i:99;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1320;}i:100;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1320;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:180:" Read and write to the same location (пример - 1000 потоков одновременно читает и пишет данные в массив, в итоге жесть)";}i:2;i:1324;}i:102;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1504;}i:103;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1504;}i:104;a:3:{i:0;s:11:"listo_close";i:1;a:0:{}i:2;i:1504;}i:105;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1504;}i:106;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:19:"Solution is to use ";}i:2;i:1505;}i:107;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1524;}i:108;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:"ATOMIC MEMORY OPERATIONS";}i:2;i:1526;}i:109;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1550;}i:110;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1552;}i:111;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:43:"  Instead of: g[i]++;
  Use AtomicAdd(g[i])";}i:2;i:1552;}i:112;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1552;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:25:"Minus: Costs productivity";}i:2;i:1601;}i:114;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1627;}i:115;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1627;}i:116;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:31:"Limitations of atomic variables";i:1;i:3;i:2;i:1627;}i:2;i:1627;}i:117;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:3;}i:2;i:1627;}i:118;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1669;}i:119;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1669;}i:120;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1669;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" Only certain operation (add, min, xor, not mod, not exponentiate)";}i:2;i:1673;}i:122;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1739;}i:123;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1739;}i:124;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1739;}i:125;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1739;}i:126;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:43:" Only certain data types (mostly int types)";}i:2;i:1743;}i:127;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1786;}i:128;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1786;}i:129;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1786;}i:130;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1786;}i:131;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:73:" NO Ordering constraints (принуждения, ограничения)";}i:2;i:1790;}i:132;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1863;}i:133;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1863;}i:134;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1863;}i:135;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1864;}i:136;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1864;}}