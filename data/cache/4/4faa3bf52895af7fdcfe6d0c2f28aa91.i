a:129:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:49:"This page contains information about C# language.";}i:2;i:1;}i:3;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:51;}i:4;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:4:"Goal";i:1;i:1;i:2;i:51;}i:2;i:51;}i:5;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:51;}i:6;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:51;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:231:"Different languages offer different capabilities:
In unmanaged C/C++ you have access  to low-level control of system (you can manage memory, create threads).
But C# allows you to make apps very rapidly [easy to control COM and DB] ";}i:2;i:70;}i:8;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:301;}i:9;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:301;}i:10;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:16:"C# is a part of ";}i:2;i:303;}i:11;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:3:"CLR";i:1;N;}i:2;i:319;}i:12;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:"
Перевод из IL кода в Native занимается ";}i:2;i:326;}i:13;a:3:{i:0;s:12:"internallink";i:1;a:2:{i:0;s:11:"JITCompiler";i:1;N;}i:2;i:390;}i:14;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:0:"";}i:2;i:405;}i:15;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:406;}i:16;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:406;}i:17;a:3:{i:0;s:6:"header";i:1;a:3:{i:0;s:10:"Definition";i:1;i:1;i:2;i:406;}i:2;i:406;}i:18;a:3:{i:0;s:12:"section_open";i:1;a:1:{i:0;i:1;}i:2;i:406;}i:19;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:406;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:79:"C#(pronounced see sharp) is a multi-paradigm programming language encompassing:";}i:2;i:431;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:510;}i:22;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:510;}i:23;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:510;}i:24;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:510;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:514;}i:26;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:515;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"strong typing";}i:2;i:517;}i:28;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:530;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:" - every variable has a type and if there are two variables of different types, you have to cast them, to make an operation executable.";}i:2;i:532;}i:30;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:667;}i:31;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:667;}i:32;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:667;}i:33;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:667;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Example : int a = 3 * ";}i:2;i:668;}i:35;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:690;}i:36;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"3";}i:2;i:691;}i:37;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:692;}i:38;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" - it gives an exception";}i:2;i:693;}i:39;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:717;}i:40;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:717;}i:41;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:717;}i:42;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:717;}i:43;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:721;}i:44;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:722;}i:45;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"imperative";}i:2;i:724;}i:46;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:734;}i:47;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" - consist of instructions. (running programme as changing states)";}i:2;i:736;}i:48;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:802;}i:49;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:802;}i:50;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:802;}i:51;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:802;}i:52;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Example : ";}i:2;i:803;}i:53;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:814;}i:54;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:130:"  List<int> results = new List<int>();
  foreach(var num in collection)
  {
      if (num % 2 != 0)
         results.Add(num);
  }";}i:2;i:814;}i:55;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:958;}i:56;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:958;}i:57;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:958;}i:58;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:962;}i:59;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:963;}i:60;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"declarative";}i:2;i:965;}i:61;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:976;}i:62;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" - we say to compiler what we want, but do not say how to get it";}i:2;i:978;}i:63;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1042;}i:64;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1042;}i:65;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1042;}i:66;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1042;}i:67;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Example (LINQ) : ";}i:2;i:1043;}i:68;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1060;}i:69;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:53:"var results = collection.Where( num => num % 2 != 0);";}i:2;i:1060;}i:70;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1117;}i:71;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1117;}i:72;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1117;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1121;}i:74;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1122;}i:75;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"functional";}i:2;i:1124;}i:76;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1134;}i:77;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" - we can create functions as objects to manipulate them (delegates, Func<>, Predicate<>, Action<>, Lambda, LINQ)";}i:2;i:1136;}i:78;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1249;}i:79;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1249;}i:80;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1249;}i:81;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1249;}i:82;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:75:"http://www.codeproject.com/Articles/375166/Functional-programming-in-Csharp";i:1;N;}i:2;i:1250;}i:83;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1329;}i:84;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1329;}i:85;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1329;}i:86;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1329;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1333;}i:88;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1334;}i:89;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"procedural";}i:2;i:1336;}i:90;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1346;}i:91;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" - we can divide task into steps";}i:2;i:1348;}i:92;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1380;}i:93;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1380;}i:94;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1380;}i:95;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1380;}i:96;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1384;}i:97;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1385;}i:98;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"generic";}i:2;i:1387;}i:99;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1394;}i:100;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:" - types can be instantiated when needed (we can apply different types in algorithms and do not change description of algorithm)";}i:2;i:1396;}i:101;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1524;}i:102;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1524;}i:103;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1524;}i:104;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1524;}i:105;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Example:";}i:2;i:1525;}i:106;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1533;}i:107;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:199:" static void MakeAtLeast<T>(T[] list, T lowest) where T : IComparable<T> {
      for (int i = 0; i < list.Length; i++)
          if (list[i].CompareTo(lowest) < 0)
              list[i] = lowest;
  }";}i:2;i:1533;}i:108;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1744;}i:109;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1744;}i:110;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1744;}i:111;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1748;}i:112;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1749;}i:113;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"object-oriented";}i:2;i:1751;}i:114;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1766;}i:115;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1768;}i:116;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1768;}i:117;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1768;}i:118;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1768;}i:119;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1772;}i:120;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1773;}i:121;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"component-oriented programming";}i:2;i:1775;}i:122;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1805;}i:123;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:76:" - allows to use component constructs such as events, properties, interfaces";}i:2;i:1807;}i:124;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1883;}i:125;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1883;}i:126;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1883;}i:127;a:3:{i:0;s:13:"section_close";i:1;a:0:{}i:2;i:1885;}i:128;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1885;}}