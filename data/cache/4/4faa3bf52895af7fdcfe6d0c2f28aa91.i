a:109:{i:0;a:3:{i:0;s:14:"document_start";i:1;a:0:{}i:2;i:0;}i:1;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:0;}i:2;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:129:"This page contains information about C# language.
C#(pronounced see sharp) is a multi-paradigm programming language encompassing:";}i:2;i:1;}i:3;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:130;}i:4;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:130;}i:5;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:130;}i:6;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:130;}i:7;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:134;}i:8;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:135;}i:9;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:13:"strong typing";}i:2;i:137;}i:10;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:150;}i:11;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:135:" - every variable has a type and if there are two variables of different types, you have to cast them, to make an operation executable.";}i:2;i:152;}i:12;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:287;}i:13;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:287;}i:14;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:287;}i:15;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:287;}i:16;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:22:"Example : int a = 3 * ";}i:2;i:288;}i:17;a:3:{i:0;s:18:"doublequoteopening";i:1;a:0:{}i:2;i:310;}i:18;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:"3";}i:2;i:311;}i:19;a:3:{i:0;s:18:"doublequoteclosing";i:1;a:0:{}i:2;i:312;}i:20;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:24:" - it gives an exception";}i:2;i:313;}i:21;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:337;}i:22;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:337;}i:23;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:337;}i:24;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:337;}i:25;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:341;}i:26;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:342;}i:27;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"imperative";}i:2;i:344;}i:28;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:354;}i:29;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:66:" - consist of instructions. (running programme as changing states)";}i:2;i:356;}i:30;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:422;}i:31;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:422;}i:32;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:422;}i:33;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:422;}i:34;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"Example : ";}i:2;i:423;}i:35;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:434;}i:36;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:130:"  List<int> results = new List<int>();
  foreach(var num in collection)
  {
      if (num % 2 != 0)
         results.Add(num);
  }";}i:2;i:434;}i:37;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:578;}i:38;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:578;}i:39;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:578;}i:40;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:582;}i:41;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:583;}i:42;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:11:"declarative";}i:2;i:585;}i:43;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:596;}i:44;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:64:" - we say to compiler what we want, but do not say how to get it";}i:2;i:598;}i:45;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:662;}i:46;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:662;}i:47;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:662;}i:48;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:662;}i:49;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:17:"Example (LINQ) : ";}i:2;i:663;}i:50;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:680;}i:51;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:53:"var results = collection.Where( num => num % 2 != 0);";}i:2;i:680;}i:52;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:737;}i:53;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:737;}i:54;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:737;}i:55;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:741;}i:56;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:742;}i:57;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"functional";}i:2;i:744;}i:58;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:754;}i:59;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:113:" - we can create functions as objects to manipulate them (delegates, Func<>, Predicate<>, Action<>, Lambda, LINQ)";}i:2;i:756;}i:60;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:869;}i:61;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:869;}i:62;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:869;}i:63;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:869;}i:64;a:3:{i:0;s:12:"externallink";i:1;a:2:{i:0;s:75:"http://www.codeproject.com/Articles/375166/Functional-programming-in-Csharp";i:1;N;}i:2;i:870;}i:65;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:949;}i:66;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:949;}i:67;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:949;}i:68;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:949;}i:69;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:953;}i:70;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:954;}i:71;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:10:"procedural";}i:2;i:956;}i:72;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:966;}i:73;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:32:" - we can divide task into steps";}i:2;i:968;}i:74;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1000;}i:75;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1000;}i:76;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1000;}i:77;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1000;}i:78;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1004;}i:79;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1005;}i:80;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:7:"generic";}i:2;i:1007;}i:81;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1014;}i:82;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:128:" - types can be instantiated when needed (we can apply different types in algorithms and do not change description of algorithm)";}i:2;i:1016;}i:83;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1144;}i:84;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1144;}i:85;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1144;}i:86;a:3:{i:0;s:6:"p_open";i:1;a:0:{}i:2;i:1144;}i:87;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:8:"Example:";}i:2;i:1145;}i:88;a:3:{i:0;s:7:"p_close";i:1;a:0:{}i:2;i:1153;}i:89;a:3:{i:0;s:12:"preformatted";i:1;a:1:{i:0;s:199:" static void MakeAtLeast<T>(T[] list, T lowest) where T : IComparable<T> {
      for (int i = 0; i < list.Length; i++)
          if (list[i].CompareTo(lowest) < 0)
              list[i] = lowest;
  }";}i:2;i:1153;}i:90;a:3:{i:0;s:10:"listu_open";i:1;a:0:{}i:2;i:1364;}i:91;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1364;}i:92;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1364;}i:93;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1368;}i:94;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1369;}i:95;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:15:"object-oriented";}i:2;i:1371;}i:96;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1386;}i:97;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1388;}i:98;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1388;}i:99;a:3:{i:0;s:13:"listitem_open";i:1;a:1:{i:0;i:1;}i:2;i:1388;}i:100;a:3:{i:0;s:16:"listcontent_open";i:1;a:0:{}i:2;i:1388;}i:101;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:1:" ";}i:2;i:1392;}i:102;a:3:{i:0;s:11:"strong_open";i:1;a:0:{}i:2;i:1393;}i:103;a:3:{i:0;s:5:"cdata";i:1;a:1:{i:0;s:30:"component-oriented programming";}i:2;i:1395;}i:104;a:3:{i:0;s:12:"strong_close";i:1;a:0:{}i:2;i:1425;}i:105;a:3:{i:0;s:17:"listcontent_close";i:1;a:0:{}i:2;i:1427;}i:106;a:3:{i:0;s:14:"listitem_close";i:1;a:0:{}i:2;i:1427;}i:107;a:3:{i:0;s:11:"listu_close";i:1;a:0:{}i:2;i:1427;}i:108;a:3:{i:0;s:12:"document_end";i:1;a:0:{}i:2;i:1427;}}