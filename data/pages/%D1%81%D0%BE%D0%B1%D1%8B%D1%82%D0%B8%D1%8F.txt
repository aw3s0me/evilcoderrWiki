====== События ======
Типы для уведомления
==== Создание типа, поддерживающего событие ====
=== 1 Определение типа для хранения доп инф-ии, передаваемой получателем уведомления о событии ===
  * ДОЛЖЕН НАСЛЕДОВАТЬ ОТ System.EventArgs
  * имя должно заканчиваться на EventArgs
  * Должны содержать какие нибудь поля-св-ва (где же хранить инфу)
Пример:
        internal class NewMailEventArgs : EventArgs {
              private string POLE;
              public NewMailEventArgs(String x) { Pole=x;}
        } 
=== 2 Определение члена события ===
  * объявляется с ключевым словом event
  * назначается область действия (public-почти всегда)
Пример:
        internal class MailManager {
              public event EventHandler<NewMailEventArgs> NewMail;
        } 
NewMail - имя события, EventHandler<NewMailEventArgs> - тип члена события
=== 3 Определение метода ответственного за уведомление объектов ===
  * В классе должен быть виртуальный защищенный метод, вызываемый из кода класса при возникновении события
  * 1 параметр - MalilMsgEventArgs e
Пример:
        internal class MailManager {
              protected virtual void OnNewMail(NewMailEventArgs e) {
                    EventHandler<NewMailEventArgs> temp = NewMail;
                    if (temp!=null) temp(this,e); //поднятие события
              }
        }  
Проблема:
temp может быть null, поэтому:
       EventHandler<NewMailEventArgs> temp = Thread.VolatileRead(ref NewMail);
VolatileRead заставляет считывать NewMail в точке вызова и позволяет копировать ссылку в переменную temp и вызов temp, когда не нулл
=== 4 Определение метода транслирующего информацию в событие ===
      internal class MailManager {
           public void SimulateNewMail(String x) {
                 NewMailEventArgs e = new NewMailEventArgs(x);
                 OnNewMail(e);
           }
      }
==== Создание типа, отслеживающего событие ====           
      internal sealed class Fax {
          public Fax(MailManager mm) {
               mm.NewMail +=FaxMsg;
          }
          private void FaxMsg(Object sender, NewMailEventArgs e){
          //sender для вз-ия с объектом MailManager
          //e - доп инф-ия о событии, e.From, e.To итд
          }
          public void Unregister(MailManager mm){
               MailManager.mm.NewMail -= FaxMsg;
          }
      }
         