This page contains information about C# language.
====== Goal ======
Different languages offer different capabilities:
In unmanaged C/C++ you have access  to low-level control of system (you can manage memory, create threads).
But C# allows you to make apps very rapidly [easy to control COM and DB] 

  * C# is a part of [[CLR]]
  * Перевод из [[IL]] кода в Native занимается [[JITCompiler]]
  * [[Unsafe code]] - can corrupt data structures or influences bad on security -> ALL methods should marked as [unsafe] keyword
  * C# provides the [[Native Code Generator Tool]]: NGen.exe
  * [[FCL]] (Framework Class Lib)
  * CLR is all about types - [[CTS]] (The Common Type System)
  * CLS - set of basic language features needed by many applications [assembly: CLSCompliant(true)] (uint+pointers etc)
  * [[Unmanaged code]]
  * [[Useful console commands]]
  * [[CSharp Utilities]]
  * [[Сборки]]
  * [[Методы]]
  * [[События]]
  * [[Наследование]]
  * [[Enum]]
  * [[String]]
  * [[Array]]
  * [[delegate]]
  * [[Custom Attributes]]
  * [[Nullable]]
  * [[Exceptions]]
  * [[Contracts]]
  * [[Memory management]]
  * [[AppDomain]]
  * [[Serialization]]
.NET Framework includes:
  * A lot of languages: C#, VB.NET, Managed C++
  * Engine for hosting programmable web pages
  * ADO.NET - model for interacting with databases
  * LINQ and Entity Framework - for performing queries
  * FCL
====== Definition ======
C#(pronounced see sharp) is a multi-paradigm programming language encompassing:
  * **strong typing** - every variable has a type and if there are two variables of different types, you have to cast them, to make an operation executable.
Example : int a = 3 * "3" - it gives an exception
  * **imperative** - consist of instructions. (running programme as changing states)
Example : 

    List<int> results = new List<int>();
    foreach(var num in collection)
    {
        if (num % 2 != 0)
           results.Add(num);
    }

  * **declarative** - we say to compiler what we want, but do not say how to get it
Example (LINQ) : 
  var results = collection.Where( num => num % 2 != 0);

  * **functional** - we can create functions as objects to manipulate them (delegates, Func<>, Predicate<>, Action<>, Lambda, LINQ)
[[http://www.codeproject.com/Articles/375166/Functional-programming-in-Csharp]]
  * **procedural** - we can divide task into steps
  * **generic** - types can be instantiated when needed (we can apply different types in algorithms and do not change description of algorithm)
Example:
   static void MakeAtLeast<T>(T[] list, T lowest) where T : IComparable<T> {
        for (int i = 0; i < list.Length; i++)
            if (list[i].CompareTo(lowest) < 0)
                list[i] = lowest;
    }

  * **object-oriented**
  * **component-oriented programming** - allows to use component constructs such as events, properties, interfaces
