====== Файлы в Linux ======
1) диск делится на partition
2) Все схема представлена в виде графа, где ребра связаны с именем файла
3) файловая система содержит - заголовки разделов, логические блоки (инф-ия о файлах и инф-ия о размещении файлов)
3) Индекс узла - содержит аттрибуты файлов (имя, тип, права, Id юзера

===== Операции над файлами =====
==== Файлы двух типов: ====
  - файлы последовательного доступа и 
  - файлы прямого доступа
  * Для последовательного доступа: чтение очередной порции данных (**read**), запись очередной порции данных (**write**) и позиционирование на начале файла (**rewind**).
  * Для прямого доступа: чтение очередной порции данных (read), запись очередной порции данных (write) и позиционирование на требуемой части данных (seek).
  * Работа с объектами этих абстрактных типов подразумевает наличие еще двух необходимых операций: создание нового объекта (new) и уничтожение существующего объекта (free).
  * прочитать атрибуты (get attribute) и установить их значения (set attribute).
==== Операции над файлом ====
  * Вся информация о файле при первом считывании хранится в адресном пространстве
  * Файл = набор байт снабженный указателем
  * Совместное использование файла возможно только для родственных процессов
==== Директория: ====
  * операции new, free, set attribute и get attribute
  * прочитать запись, соответствующую имени файла, – get record;
  * добавить новую запись – add record;
  * удалить запись, соответствующую имени файла, – delete record.
===== Создание файла =====
  * int creat(char *path, int mode); 
  * -1 если ошибка
===== Чтение аттрибутов =====
struct stat *buf - в нее будут помещены эти аттрибуты
  * int stat(char *filename, struct stat *buf);
  * int fstat(int fd, struct stat *buf);
  * int lstat(char *filename, struct stat *buf);
===== Запись аттрибутов =====
  * int ftruncate(int fd, size_t length); - изменение длины файла
  * off_t lseek(int fd, off_t offset, int whence); - для изменения положения указателя текущей позиции в открытом регулярном файле.
===== Связывание =====
Для создания новых ребер без добавления новых файлов
  * Созданы для того чтобы не было дублирования, что то типа ярлыка
2 способы связывания:
==== Жесткая связь ====
Новое ребро
  * ln [options] source [dest]
  * ln [options] source ... directory
просто ln - жесткие
  * int link(char *pathname, char *linkpathname);
==== Мягкая связь ====
  * ln -s - мягкие связи,
  * int symlink(char *pathname, char *linkpathname);
==== Удаление связей ====
int unlink(char *pathname);
===== Отображаемые в память файлы =====
Этапы:
  - Открыть open()
  - Отображение из диск простр-ва в адресное простр-во mmap()
void *mmap (void *start, size_t length, int prot, int flags, int fd, off_t offset);
  * возвращает начальный адрес памяти
для освобождения - int munmap (void *start, size_t length);