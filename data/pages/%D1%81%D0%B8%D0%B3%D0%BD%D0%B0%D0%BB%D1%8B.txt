====== Сигналы ======
===== Что такое =====
Сигналы — это средство, с помощью которого процессам можно передать сообщения о некоторых событиях в системе. 
===== Генерация сигналов =====
Сами процессы тоже могут генерировать сигналы, с помощью которых они передают определенные сообщения ядру и другим процессам. 
===== Для чего =====
С помощью сигналов можно осуществлять такие акции управления процессами, как приостановка процесса, запуск приостановленного процесса, завершение работы процесса. Всего в Linux существует 63 разных сигнала, их перечень можно посмотреть по команде
===== Конвертация в числа =====
Сигналы принято обозначать номерами или символическими именами. Все имена начинаются на SIG, но эту приставку иногда опускают: например, сигнал с номером 1 обозначают или как SIGHUP, или просто как HUP.
===== Послать сигнал =====
pid – это идентификатор процесса, которому посылается сигнал, а номер – номер сигнала, который посылается процессу
    kill [-signal] [--] pid
    kill -l 
Если параметр –номер отсутствует, то посылается сигнал SIGTERM, обычно имеющий номер 15
  * Число n > 0 – определяет идентификатор процесса, которому будет доставлен сигнал.
  * Число 0 – сигнал будет доставлен всем процессам текущей группы для данного управляющего терминала.
  * Число -1 с предваряющей опцией -- – сигнал будет доставлен (если позволяют полномочия) всем процессам с идентификаторами, большими 1.
  * Число n < 0, где n не равно -1, с предваряющей опцией -- – сигнал будет доставлен всем процессам из группы процессов, идентификатор которой равен -n.
==== Системный вызов kill ====
pid описывает, кому посылается сигнал, а аргумент sig – какой сигнал посылается.
    int kill(pid_t pid, int signal);

  * Если pid > 0 и sig > 0, то сигнал номером sig (если позволяют привилегии) посылается процессу с идентификатором pid.
  * Если pid = 0, а sig > 0, то сигнал с номером sig посылается всем процессам в группе, к которой принадлежит посылающий процесс.
  * Если pid = -1, sig > 0 и посылающий процесс не является процессом суперпользователя, то сигнал посылается всем процессам в системе, для которых идентификатор пользователя совпадает с эффективным идентификатором пользователя процесса, посылающего сигнал.
  * Если pid = -1, sig > 0 и посылающий процесс является процессом суперпользователя, то сигнал посылается всем процессам в системе, за исключением системных процессов (обычно всем, кроме процессов с pid = 0 и pid = 1).
  * Если pid < 0, но не –1, sig > 0, то сигнал посылается всем процессам из группы, идентификатор которой равен абсолютному значению аргумента pid (если позволяют привилегии).
  * Если значение sig = 0, то производится проверка на ошибку, а сигнал не посылается, так как все сигналы имеют номера > 0. Это можно использовать для проверки правильности аргумента pid (есть ли в системе процесс или группа процессов с соответствующим идентификатором).
===== Обработка сигнала =====
функция signal, возвращающая указатель на функцию с одним параметром типа int, которая ничего не возвращает, и имеющая два параметра: параметр sig типа int и параметр handler, служащий указателем на ничего не возвращающую функцию с одним параметром типа int.
     void (*signal (int sig, void (*handler) (int)))(int);

  * sig – это номер сигнала, обработку которого предстоит изменить
  * handler описывает новый способ обработки сигнала
Системный вызов возвращает указатель на старый способ обработки сигнала, значение которого можно использовать для восстановления старого способа в случае необходимости.