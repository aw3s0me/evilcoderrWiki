__global__
void rgba_to_greyscale(const uchar4* const rgbaImage,
                       unsigned char* const greyImage,
                       int numRows, int numCols)
{
    
    int idx = blockIdx.x * blockDim.x + threadIdx.x;
    uchar4 rgba = rgbaImage[idx];
    greyImage[idx] = .299f * rgba.x + .587f * rgba.y + .114f * rgba.z;
    
  //TODO
  //Fill in the kernel to convert from color to greyscale
  //the mapping from components of a uchar4 to RGBA is:
  // .x -> R ; .y -> G ; .z -> B ; .w -> A
  //
  //The output (greyImage) at each pixel should be the result of
  //applying the formula: output = .299f * R + .587f * G + .114f * B;
  //Note: We will be ignoring the alpha channel for this conversion

  //First create a mapping from the 2D block and grid locations
  //to an absolute 2D location in the image, then use that to
  //calculate a 1D offset
}

void your_rgba_to_greyscale(const uchar4 * const h_rgbaImage, uchar4 * const d_rgbaImage,
                            unsigned char* const d_greyImage, size_t numRows, size_t numCols)
{
  //You must fill in the correct sizes for the blockSize and gridSize
  //currently only one block with one thread is being launched
  const dim3 blockSize(numCols, 1, 1);  //TODO
  const dim3 gridSize( numRows, 1, 1);  //TODO
  rgba_to_greyscale<<<gridSize, blockSize>>>(d_rgbaImage, d_greyImage, numRows, numCols);
  
  cudaDeviceSynchronize(); checkCudaErrors(cudaGetLastError());
}

----


----

#include "reference_calc.cpp"
#include "utils.h"
#include <stdio.h>

#define yBlocks 16
#define xBlocks 16

__global__
void rgba_to_greyscale(const uchar4* const rgbaImage,
                       unsigned char* const greyImage,
                       int numRows, int numCols)
{
    int pixelY = blockIdx.y * yBlocks + threadIdx.y;
    int pixelX = blockIdx.x * xBlocks + threadIdx.x;
    int pixelIdx = pixelY * numCols + pixelX;

    // Exit if outside image
    if (pixelIdx >= numCols * numRows)
        return;
    uchar4 rgba = rgbaImage[pixelIdx];
    greyImage[pixelIdx] = .299f * rgba.x + .587f * rgba.y + .114f * rgba.z;
    
  //TODO
  //Fill in the kernel to convert from color to greyscale
  //the mapping from components of a uchar4 to RGBA is:
  // .x -> R ; .y -> G ; .z -> B ; .w -> A
  //
  //The output (greyImage) at each pixel should be the result of
  //applying the formula: output = .299f * R + .587f * G + .114f * B;
  //Note: We will be ignoring the alpha channel for this conversion

  //First create a mapping from the 2D block and grid locations
  //to an absolute 2D location in the image, then use that to
  //calculate a 1D offset
}

void your_rgba_to_greyscale(const uchar4 * const h_rgbaImage, uchar4 * const d_rgbaImage,
                            unsigned char* const d_greyImage, size_t numRows, size_t numCols)
{
   

   int ydim = ceil(numRows/float(yBlocks));
   int xdim = ceil(numCols/float(xBlocks));

   const dim3 blockSize(xBlocks, yBlocks, 1); 
   const dim3 gridSize(xdim, ydim, 1);
  rgba_to_greyscale<<<gridSize, blockSize>>>(d_rgbaImage, d_greyImage, numRows, numCols);
  
  cudaDeviceSynchronize(); checkCudaErrors(cudaGetLastError());
}